{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-data-ingestion-transformation"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/p6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "abc_active_flag",
										"value": {
											"value": "@string('true')",
											"type": "Expression"
										}
									},
									{
										"name": "abc_load_timestamp",
										"value": {
											"value": "@string(utcNow())",
											"type": "Expression"
										}
									},
									{
										"name": "abc_adf_name",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									{
										"name": "abc_pipeline_name",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "abc_run_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "abc_trigger_name",
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										}
									},
									{
										"name": "abc_trigger_time",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.param_p_file_path,'/*')",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_p1_odc_source",
								"type": "DatasetReference",
								"parameters": {
									"param_ds_filename": {
										"value": "@pipeline().parameters.param_p_filename",
										"type": "Expression"
									},
									"param_ds_filepath": {
										"value": "@pipeline().parameters.param_p_file_path",
										"type": "Expression"
									},
									"param_ds_container": {
										"value": "@pipeline().parameters.param_p_container_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_p1_raw_layer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"param_p_filename": {
						"type": "string"
					},
					"param_p_container_name": {
						"type": "string",
						"defaultValue": "hello-world-pipelines"
					},
					"param_p_file_path": {
						"type": "string",
						"defaultValue": "p2/source_odc_data"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p7')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP_ABC_NEXT_VAL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\nDECLARE \n    @VAR_LOOKUP_YEAR INT,\n    @VAR_LOOKUP_ADLSG2_DOMAIN_NAME VARCHAR(200),\n    @VAR_LOOKUP_CONTAINER_NAME VARCHAR(200),\n    @VAR_LOOKUP_DIRECTORY_PATH VARCHAR(200),\n    @VAR_LOOKUP_HIERARCHY_PATH VARCHAR(200),\n    @VAR_LOOKUP_FILENAME VARCHAR(200)\n\nEXECUTE [dbo].[SP_ABC_NEXT_VAL] @VAR_LOOKUP_YEAR OUTPUT, @VAR_LOOKUP_ADLSG2_DOMAIN_NAME OUTPUT, @VAR_LOOKUP_CONTAINER_NAME OUTPUT, @VAR_LOOKUP_DIRECTORY_PATH OUTPUT, @VAR_LOOKUP_HIERARCHY_PATH OUTPUT, @VAR_LOOKUP_FILENAME OUTPUT\n\nSELECT \n    @VAR_LOOKUP_YEAR AS VAR_LOOKUP_YEAR, \n    @VAR_LOOKUP_ADLSG2_DOMAIN_NAME AS VAR_LOOKUP_ADLSG2_DOMAIN_NAME, \n\t@VAR_LOOKUP_CONTAINER_NAME AS VAR_LOOKUP_CONTAINER_NAME, \n\t@VAR_LOOKUP_DIRECTORY_PATH AS VAR_LOOKUP_DIRECTORY_PATH, \n\t@VAR_LOOKUP_HIERARCHY_PATH AS VAR_LOOKUP_HIERARCHY_PATH, \n\t@VAR_LOOKUP_FILENAME AS VAR_LOOKUP_FILENAME\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_p7_source_ad_works_db",
								"type": "DatasetReference",
								"parameters": {
									"param_ds_sql_server_name": {
										"value": "@pipeline().globalParameters.param_global__source_sql_server",
										"type": "Expression"
									},
									"param_ds_sql_db_name": {
										"value": "@pipeline().globalParameters.param_global__source_sql_db_name",
										"type": "Expression"
									},
									"param_ds_sql_server_admin_name": {
										"value": "@pipeline().globalParameters.param_global__sql_server_admin_name",
										"type": "Expression"
									},
									"param_ds_sql_server_password_secret_name": {
										"value": "@pipeline().globalParameters.param_global__source_sql_server_admin_password_secret_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SP_ABC_NEXT_VAL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "abc_active_flag",
										"value": {
											"value": "@string('true')",
											"type": "Expression"
										}
									},
									{
										"name": "abc_load_timestamp",
										"value": {
											"value": "@string(utcNow())",
											"type": "Expression"
										}
									},
									{
										"name": "abc_adf_name",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									{
										"name": "abc_pipeline_name",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "abc_run_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "abc_trigger_name",
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										}
									},
									{
										"name": "abc_trigger_time",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": {
									"value": "@concat('SELECT TOP 1000 * FROM SALESLT.ADDRES123S WHERE YEAR(ModifiedDate) = ', activity('SP_ABC_NEXT_VAL').output.firstRow.VAR_LOOKUP_YEAR)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_p7_source_ad_works_db",
								"type": "DatasetReference",
								"parameters": {
									"param_ds_sql_server_name": {
										"value": "@pipeline().globalParameters.param_global__source_sql_server",
										"type": "Expression"
									},
									"param_ds_sql_db_name": {
										"value": "@pipeline().globalParameters.param_global__source_sql_db_name",
										"type": "Expression"
									},
									"param_ds_sql_server_admin_name": {
										"value": "@pipeline().globalParameters.param_global__sql_server_admin_name",
										"type": "Expression"
									},
									"param_ds_sql_server_password_secret_name": {
										"value": "@pipeline().globalParameters.param_global__source_sql_server_admin_password_secret_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_p7_target_raw_layer",
								"type": "DatasetReference",
								"parameters": {
									"param_ds_year": {
										"value": "@activity('SP_ABC_NEXT_VAL').output.firstRow.VAR_LOOKUP_YEAR",
										"type": "Expression"
									},
									"param_ds_adlsg2_domain_name": {
										"value": "@activity('SP_ABC_NEXT_VAL').output.firstRow.VAR_LOOKUP_ADLSG2_DOMAIN_NAME",
										"type": "Expression"
									},
									"param_ds_container_name": {
										"value": "@activity('SP_ABC_NEXT_VAL').output.firstRow.VAR_LOOKUP_CONTAINER_NAME",
										"type": "Expression"
									},
									"param_ds_file_path": {
										"value": "@activity('SP_ABC_NEXT_VAL').output.firstRow.VAR_LOOKUP_DIRECTORY_PATH",
										"type": "Expression"
									},
									"param_ds_hierarchy_path": {
										"value": "@activity('SP_ABC_NEXT_VAL').output.firstRow.VAR_LOOKUP_HIERARCHY_PATH",
										"type": "Expression"
									},
									"param_ds_file_name": {
										"value": "@activity('SP_ABC_NEXT_VAL').output.firstRow.VAR_LOOKUP_FILENAME",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Log Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_ABC_PIPELINE_LOG_STATUS]",
							"storedProcedureParameters": {
								"CATEGORY": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].Category",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"COPY_DURATION": {
									"value": {
										"value": "@activity('Copy data1').output.copyDuration",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DATA": {
									"value": {
										"value": "@string(activity('Copy data1').output.errors[0].Data)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DATA_FACTORY_NAME": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DATA_READ": {
									"value": {
										"value": "@activity('Copy data1').output.dataRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DATA_WRITTEN": {
									"value": {
										"value": "@activity('Copy data1').output.dataWritten",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ERROR_CODE": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].Code",
										"type": "Expression"
									},
									"type": "String"
								},
								"ERROR_MESSAGE": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"EVENT_TYPE": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].EventType",
										"type": "Expression"
									},
									"type": "String"
								},
								"EXECEPTION_TYPE": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].ExceptionType",
										"type": "Expression"
									},
									"type": "String"
								},
								"FILLES_WRITTEN": {
									"value": {
										"value": "@activity('Copy data1').output.filesWritten",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"INNER_EVENT_INFOS": {
									"value": {
										"value": "@string(activity('Copy data1').output.errors[0].InnerEventInfos)",
										"type": "Expression"
									},
									"type": "String"
								},
								"MESSAGE_ID": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].MsgId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PIPELINE_ID": {
									"value": {
										"value": "@pipeline().GroupId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PIPELINE_NAME": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PIPELINE_STATUS": {
									"value": {
										"value": "@string('FAIL')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ROWS_COPIED": {
									"value": null,
									"type": "Int32"
								},
								"ROWS_READ": {
									"value": {
										"value": "@activity('Copy data1').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RUN_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"SINK_PEAK_CONNECTIONS": {
									"value": {
										"value": "@activity('Copy data1').output.sinkPeakConnections",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SOURCE": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].Source",
										"type": "Expression"
									},
									"type": "String"
								},
								"SOURCE_PEAK_CONNECTIONS": {
									"value": {
										"value": "@activity('Copy data1').output.sourcePeakConnections",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"STACK_TRACE": {
									"value": {
										"value": "@activity('Copy data1').output.errors[0].StackTrace",
										"type": "Expression"
									},
									"type": "String"
								},
								"TRIGGER_NAME": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TRIGGER_TIME": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_souce_param__hello_word_source__advworks_db",
							"type": "LinkedServiceReference",
							"parameters": {
								"param_ls_sql_server_name": "sql-db-server--hello-world.database.windows.net",
								"param_ls_sql_db_name": "AzureSQL__Source ",
								"param_ls_sql_server_admin_name": "sql_server_admin",
								"param_ls_sql_server_password_secret_name": "secret-adv-works-db-password"
							}
						}
					},
					{
						"name": "Log Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[USP_ABC_PIPELINE_LOG_STATUS]",
							"storedProcedureParameters": {
								"CATEGORY": {
									"value": null,
									"type": "Int32"
								},
								"COPY_DURATION": {
									"value": {
										"value": "@activity('Copy data1').output.copyDuration",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DATA": {
									"value": null,
									"type": "String"
								},
								"DATA_FACTORY_NAME": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DATA_READ": {
									"value": {
										"value": "@activity('Copy data1').output.dataRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DATA_WRITTEN": {
									"value": {
										"value": "@activity('Copy data1').output.dataWritten",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ERROR_CODE": {
									"value": null,
									"type": "String"
								},
								"ERROR_MESSAGE": {
									"value": null,
									"type": "String"
								},
								"EVENT_TYPE": {
									"value": null,
									"type": "String"
								},
								"EXECEPTION_TYPE": {
									"value": null,
									"type": "String"
								},
								"FILLES_WRITTEN": {
									"value": {
										"value": "@activity('Copy data1').output.filesWritten",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"INNER_EVENT_INFOS": {
									"value": null,
									"type": "String"
								},
								"MESSAGE_ID": {
									"value": null,
									"type": "String"
								},
								"PIPELINE_ID": {
									"value": {
										"value": "@pipeline().GroupId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PIPELINE_NAME": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PIPELINE_STATUS": {
									"value": {
										"value": "@string('SUCCESS')",
										"type": "Expression"
									},
									"type": "String"
								},
								"ROWS_COPIED": {
									"value": {
										"value": "@activity('Copy data1').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ROWS_READ": {
									"value": {
										"value": "@activity('Copy data1').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RUN_ID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"SINK_PEAK_CONNECTIONS": {
									"value": {
										"value": "@activity('Copy data1').output.sinkPeakConnections",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SOURCE": {
									"value": null,
									"type": "String"
								},
								"SOURCE_PEAK_CONNECTIONS": {
									"value": {
										"value": "@activity('Copy data1').output.sourcePeakConnections",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"STACK_TRACE": {
									"value": null,
									"type": "String"
								},
								"TRIGGER_NAME": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TRIGGER_TIME": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_souce_param__hello_word_source__advworks_db",
							"type": "LinkedServiceReference",
							"parameters": {
								"param_ls_sql_server_name": "sql-db-server--hello-world.database.windows.net",
								"param_ls_sql_db_name": "AzureSQL__Source ",
								"param_ls_sql_server_admin_name": "sql_server_admin",
								"param_ls_sql_server_password_secret_name": "secret-adv-works-db-password"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cricket_flatten_info_data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_p8_source_json_files_cricket_data",
								"type": "DatasetReference"
							},
							"name": "StageFileData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_p8_target_flatten_info",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FlattenInfo"
						},
						{
							"name": "DelistArrayColumns"
						},
						{
							"name": "SelectAndRenameColumns"
						},
						{
							"name": "InfoSummaryPK"
						}
					],
					"scriptLines": [
						"source(output(",
						"          meta as (data_version as string, created as string, revision as integer),",
						"          info as (balls_per_over as integer, city as string, dates as string[], event as (name as string, match_number as integer), gender as string, match_type as string, match_type_number as integer, officials as (match_referees as string[], reserve_umpires as string[], tv_umpires as string[], umpires as string[]), outcome as (winner as string, by as (runs as integer)), overs as integer, player_of_match as string[], players as ({South Africa} as string[], Australia as string[]), registry as (people as ({A Zampa} as string, {AK Markram} as string, {CM Brown} as string, {DA Miller} as string, {DA Warner} as string, {GJ Maxwell} as string, {H Klaasen} as string, {HE van der Dussen} as string, {J Srinath} as string, {JP Inglis} as string, {JR Hazlewood} as string, {JS Wilson} as string, {K Rabada} as string, {KA Maharaj} as string, {L Ngidi} as string, {M Jansen} as string, {M Labuschagne} as string, {MA Starc} as string, {MP Stoinis} as string, {MR Marsh} as string, {PJ Cummins} as string, {Q de Kock} as string, {RA Kettleborough} as string, {RK Illingworth} as string, {SA Abbott} as string, {SPD Smith} as string, {T Bavuma} as string, {T Shamsi} as string)), season as string, team_type as string, teams as string[], toss as (decision as string, winner as string), venue as string),",
						"          innings as (team as string, overs as (over as integer, deliveries as (batter as string, bowler as string, non_striker as string, runs as (batter as integer, extras as integer, total as integer))[])[], powerplays as (from as double, to as double, type as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> StageFileData",
						"StageFileData foldDown(unroll(info.dates),",
						"     mapColumn(",
						"          data_version = meta.data_version,",
						"          created = meta.created,",
						"          revision = meta.revision,",
						"          balls_per_over = info.balls_per_over,",
						"          city = info.city,",
						"          dates = info.dates,",
						"          event = info.event.name,",
						"          match_number = info.event.match_number,",
						"          gender = info.gender,",
						"          match_type = info.match_type,",
						"          match_type_number = info.match_type_number,",
						"          outcome = info.outcome.winner,",
						"          by = info.outcome.by,",
						"          overs = info.overs,",
						"          season = info.season,",
						"          team_type = info.team_type,",
						"          toss = info.toss.winner,",
						"          decision = info.toss.decision,",
						"          venue = info.venue,",
						"          teams = info.teams,",
						"          player_of_match = info.player_of_match",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenInfo",
						"FlattenInfo derive(teams1 = teams[1],",
						"          teams2 = teams[2],",
						"          player_of_match1 = player_of_match[1],",
						"          player_of_match2 = player_of_match[2],",
						"          win_by = replace(replace(split(toString(by),':')[1],'\"',''),'{',''),",
						"          win_by_wickets_or_runs = replace(replace(split(toString(by),':')[2],'\"',''),'}','')) ~> DelistArrayColumns",
						"InfoSummaryPK select(mapColumn(",
						"          info_summary_pk,",
						"          data_version,",
						"          created,",
						"          revision,",
						"          balls_per_over,",
						"          city,",
						"          dates,",
						"          event,",
						"          match_number,",
						"          gender,",
						"          match_type,",
						"          match_type_number,",
						"          outcome,",
						"          overs,",
						"          season,",
						"          team_type,",
						"          toss,",
						"          decision,",
						"          venue,",
						"          teams,",
						"          player_of_match,",
						"          teams1,",
						"          teams2,",
						"          player_of_match1,",
						"          player_of_match2,",
						"          win_by,",
						"          win_by_wickets_or_runs",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAndRenameColumns",
						"DelistArrayColumns keyGenerate(output(info_summary_pk as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> InfoSummaryPK",
						"SelectAndRenameColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['info.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cricket_flatten_inning_overs')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_p8_source_json_files_cricket_data",
								"type": "DatasetReference"
							},
							"name": "StageFileData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_p8_target_flatten_innings",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FlattenInfo"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          meta as (data_version as string, created as string, revision as integer),",
						"          info as (balls_per_over as integer, city as string, dates as string[], event as (name as string, match_number as integer), gender as string, match_type as string, match_type_number as integer, officials as (match_referees as string[], reserve_umpires as string[], tv_umpires as string[], umpires as string[]), outcome as (winner as string, by as (runs as integer)), overs as integer, player_of_match as string[], players as ({South Africa} as string[], Australia as string[]), registry as (people as ({A Zampa} as string, {AK Markram} as string, {CM Brown} as string, {DA Miller} as string, {DA Warner} as string, {GJ Maxwell} as string, {H Klaasen} as string, {HE van der Dussen} as string, {J Srinath} as string, {JP Inglis} as string, {JR Hazlewood} as string, {JS Wilson} as string, {K Rabada} as string, {KA Maharaj} as string, {L Ngidi} as string, {M Jansen} as string, {M Labuschagne} as string, {MA Starc} as string, {MP Stoinis} as string, {MR Marsh} as string, {PJ Cummins} as string, {Q de Kock} as string, {RA Kettleborough} as string, {RK Illingworth} as string, {SA Abbott} as string, {SPD Smith} as string, {T Bavuma} as string, {T Shamsi} as string)), season as string, team_type as string, teams as string[], toss as (decision as string, winner as string), venue as string),",
						"          innings as (team as string, overs as (over as integer, deliveries as (batter as string, bowler as string, non_striker as string, runs as (batter as integer, extras as integer, total as integer))[])[], powerplays as (from as double, to as double, type as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> StageFileData",
						"StageFileData foldDown(unrollMultiple(info.dates,innings,innings.overs,innings.overs.deliveries),",
						"     mapColumn(",
						"          data_version = meta.data_version,",
						"          created = meta.created,",
						"          revision = meta.revision,",
						"          dates = info.dates,",
						"          event = info.event.name,",
						"          match_number = info.event.match_number,",
						"          match_type = info.match_type,",
						"          match_type_number = info.match_type_number,",
						"          innings = innings.overs.over,",
						"          team = innings.team,",
						"          over = innings.overs.over,",
						"          batter = innings.overs.deliveries.batter,",
						"          bowler = innings.overs.deliveries.bowler,",
						"          non_striker = innings.overs.deliveries.non_striker,",
						"          runs = innings.overs.deliveries.runs,",
						"          wickets = innings.overs.deliveries",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenInfo",
						"FlattenInfo derive(runs = split(toString(runs),','),",
						"          batter_run_per_ball = split(split(toString(runs),',')[1],':')[2],",
						"          extra_run_per_ball = split(split(toString(runs),',')[2],':')[2],",
						"          total_run_per_ball = split(split(toString(runs),',')[3],':')[2],",
						"          deliveries_wickets1 = split( replace(replace(replace(replace(toString(split(toString(wickets),'},\"')[2]), 'wickets\":[{',''), '\"fielders\":[{','') ,'}','') ,']',''), ',')[1],",
						"          deliveries_wickets2 = split( replace(replace(replace(replace(toString(split(toString(wickets),'},\"')[2]), 'wickets\":[{',''), '\"fielders\":[{','') ,'}','') ,']',''), ',')[2],",
						"          deliveries_wickets3 = split( replace(replace(replace(replace(toString(split(toString(wickets),'},\"')[2]), 'wickets\":[{',''), '\"fielders\":[{','') ,'}','') ,']',''), ',')[3]) ~> derivedColumn1",
						"derivedColumn1 derive(wickets_kind = at( [ toString(split(deliveries_wickets1,':')[1]) -> toString(split(deliveries_wickets1,':')[2]), toString(split(deliveries_wickets2,':')[1]) -> toString(split(deliveries_wickets2,':')[2]), toString(split(deliveries_wickets3,':')[1]) -> toString(split(deliveries_wickets3,':')[2]) ], '\"kind\"'),",
						"          player_out = at( [ toString(split(deliveries_wickets1,':')[1]) -> toString(split(deliveries_wickets1,':')[2]), toString(split(deliveries_wickets2,':')[1]) -> toString(split(deliveries_wickets2,':')[2]), toString(split(deliveries_wickets3,':')[1]) -> toString(split(deliveries_wickets3,':')[2]) ], '\"player_out\"'),",
						"          fielders_name = at( [ toString(split(deliveries_wickets1,':')[1]) -> toString(split(deliveries_wickets1,':')[2]), toString(split(deliveries_wickets2,':')[1]) -> toString(split(deliveries_wickets2,':')[2]), toString(split(deliveries_wickets3,':')[1]) -> toString(split(deliveries_wickets3,':')[2]) ], '\"name\"')) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          data_version,",
						"          created,",
						"          revision,",
						"          dates,",
						"          event,",
						"          match_number,",
						"          match_type,",
						"          match_type_number,",
						"          innings,",
						"          team,",
						"          over,",
						"          batter,",
						"          bowler,",
						"          non_striker,",
						"          runs,",
						"          batter_run_per_ball,",
						"          extra_run_per_ball,",
						"          total_run_per_ball,",
						"          wickets_kind,",
						"          player_out,",
						"          fielders_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['innings.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cricket_flatten_players')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_p8_source_json_files_cricket_data",
								"type": "DatasetReference"
							},
							"name": "StageFileData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_p8_target_flatten_info",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "KeysAndPlayerObject"
						},
						{
							"name": "Team1AndTeam2Array"
						},
						{
							"name": "FlattenTeamObject"
						},
						{
							"name": "SplitTeamAndPlayerNames"
						},
						{
							"name": "FlattenPlayerNames"
						},
						{
							"name": "PlayerPK"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          meta as (data_version as string, created as string, revision as integer),",
						"          info as (balls_per_over as integer, city as string, dates as string[], event as (name as string, match_number as integer), gender as string, match_type as string, match_type_number as integer, officials as (match_referees as string[], reserve_umpires as string[], tv_umpires as string[], umpires as string[]), outcome as (winner as string, by as (runs as integer)), overs as integer, player_of_match as string[], players as ({South Africa} as string[], Australia as string[]), registry as (people as ({A Zampa} as string, {AK Markram} as string, {CM Brown} as string, {DA Miller} as string, {DA Warner} as string, {GJ Maxwell} as string, {H Klaasen} as string, {HE van der Dussen} as string, {J Srinath} as string, {JP Inglis} as string, {JR Hazlewood} as string, {JS Wilson} as string, {K Rabada} as string, {KA Maharaj} as string, {L Ngidi} as string, {M Jansen} as string, {M Labuschagne} as string, {MA Starc} as string, {MP Stoinis} as string, {MR Marsh} as string, {PJ Cummins} as string, {Q de Kock} as string, {RA Kettleborough} as string, {RK Illingworth} as string, {SA Abbott} as string, {SPD Smith} as string, {T Bavuma} as string, {T Shamsi} as string)), season as string, team_type as string, teams as string[], toss as (decision as string, winner as string), venue as string),",
						"          innings as (team as string, overs as (over as integer, deliveries as (batter as string, bowler as string, non_striker as string, runs as (batter as integer, extras as integer, total as integer))[])[], powerplays as (from as double, to as double, type as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> StageFileData",
						"StageFileData foldDown(unroll(info.dates),",
						"     mapColumn(",
						"          data_version = meta.data_version,",
						"          created = meta.created,",
						"          revision = meta.revision,",
						"          dates = info.dates,",
						"          event = info.event.name,",
						"          match_number = info.event.match_number,",
						"          match_type = info.match_type,",
						"          match_type_number = info.match_type_number,",
						"          players = info.players",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> KeysAndPlayerObject",
						"KeysAndPlayerObject derive(players2 = split(replace(replace(replace(toString(players),'{',''),'}',''),'],\"',']|\"'),'|')) ~> Team1AndTeam2Array",
						"Team1AndTeam2Array foldDown(unroll(players2),",
						"     mapColumn(",
						"          data_version,",
						"          created,",
						"          revision,",
						"          dates,",
						"          event,",
						"          match_number,",
						"          match_type,",
						"          match_type_number,",
						"          players2",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTeamObject",
						"FlattenTeamObject derive(players_team_name = split(toString(players2),':')[1],",
						"          players3 = split(split(toString(players2),':')[2],',')) ~> SplitTeamAndPlayerNames",
						"SplitTeamAndPlayerNames foldDown(unroll(players3),",
						"     mapColumn(",
						"          data_version,",
						"          created,",
						"          revision,",
						"          dates,",
						"          event,",
						"          match_number,",
						"          match_type,",
						"          match_type_number,",
						"          players_team_name,",
						"          players3",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenPlayerNames",
						"FlattenPlayerNames keyGenerate(output(PlayerPK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> PlayerPK",
						"PlayerPK select(mapColumn(",
						"          PlayerPK,",
						"          data_version,",
						"          created,",
						"          revision,",
						"          dates,",
						"          event,",
						"          match_number,",
						"          match_type,",
						"          match_type_number,",
						"          players_team_name,",
						"          players3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['players.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p8_info_summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transform_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cricket_flatten_info_data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageFileData": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cricket_flatten_info_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p8_players')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "transform_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cricket_flatten_players",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageFileData": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cricket_flatten_players')]"
			]
		}
	]
}